namespace = shrooblord_autocolonise

#TODO: Add is-Colony-Ship-still-alive checks and abort Events / reset flags as appropriate in case it somehow died before the chain could complete

#default auto-col
country_event {
	id = shrooblord_autocolonise.1
	hide_window = yes

	mean_time_to_happen = { days = 15 }

	pre_triggers = {
		is_ai = no
	}

	trigger = {
		has_policy_flag = shr_autocolonisation_enabled_protocols
	}

	immediate = {
		every_system_within_border = {
			every_system_planet = {
				limit = {			#only habitable planets within borders that are unowned and not currently being colonised
					AND = {
						habitable_planet = yes
						NAND = {
							exists = owner
							owner = { is_primitive = yes }
						}
						is_colony = no
						is_under_colonization = no
						NOT = { has_planet_flag = autocolonise_any }
					}
				}

				root = { 
					capital_scope = {
						save_event_target_as = autocoloniser_spawn
					}

					#by default, we use the Founder Species to colonise with (the target Species may be changed later through further filtering)
					owner_species = {
						save_event_target_as = autocol_species
					}
				}

				#set the "any colonist species may colonise this world, thx" flag
				set_planet_flag = autocolonise_any
				save_event_target_as = autocol_planet

				#figure out which species would survive on this planet the best (i.e. look for maximum habitability)
				#every_owned_species = {
				#	limit = {
				#		is_sapient = yes
				#		has_colonization_control = no

						#scope back to Planet to get Habitability
				#		prev = {
				#			habitability = {
				#				who = this
				#				value >= 0.7
				#			}
				#		}
				#	}

					#set Social Welfare for all owned Species real quick (TEST)
				#	set_living_standard = { type = living_standard_good country = root }
				#}




				#if there are multiple likely candidates, choose one at random
				#...




				#if all our options are low-habitability (< 70%) only, discard, *unless* the Policy "Minimum Habitability" override allows this regardless
				#...




				#Find the closest system that satisfies the conditions: 0) owned by this country; 1) has a Starbase; 2) with a Shipyard
				closest_system = {
					limit = {
						exists = space_owner
						space_owner = { is_same_value = root }

						starbase = {
							has_starbase_module = shipyard
						}
					}

					min_steps = 0
					max_steps = 1000
					
					starbase = { save_event_target_as = autocoloniser_spawn }
				}

				#if we still have a candidate at this point, spawn a Colony Ship for them at the nearest Shipyard and send it on its way!
				create_fleet = {
					name = "NAME_AutoColoniser"
					effect = {
						set_owner = root
						create_ship = {
							name = "NAME_AutoColoniser"
							random_existing_design = colonizer
							colonizer_species = event_target:autocol_species #root.owner_species #event_target:cryonic_clones
							prefix = no
							upgradable = no
						}

						#spawn location
						set_location = {
							target = event_target:autocoloniser_spawn
							distance = 5
							angle = random
						}

						#give the spawned Colony Ship some orders; fly to the planet, and start Colonising it!
						queue_actions = {									
							orbit_planet = event_target:autocol_planet								#go to the planet
							wait = {duration = 10}													#wait 10 days in-orbit

							effect = {
								id = shrooblord_autocolonise.1.trigger.2
								delete_fleet = this													#suicide Colony Ship
								event_target:autocol_planet = { 
									remove_planet_flag = autocolonise_any							#get rid of the "this is my target" flag
									start_colony = {}												#start the Colonisation of the Planet below
								}		
							}
						}
					}
					settings = {
						can_change_composition = no
						can_change_leader = no
						uses_naval_capacity = no
						spawn_debris = no
					}
				}
			}
		}
	}
}

#auto-col, but pref organics
country_event {
	id = shrooblord_autocolonise.2
	hide_window = yes
	#is_triggered_only = yes

	mean_time_to_happen = { days = 15 }

	pre_triggers = {
		is_ai = no
	}

	trigger = {
        has_policy_flag = shr_autocolonisation_enabled_prefer_organics_protocols
	}

	immediate = {
		
	}
}

#auto-col, and definitely no machines allowed!! (even go so far as to allow organics with very low habitability)
country_event {
	id = shrooblord_autocolonise.3
	hide_window = yes
	#is_triggered_only = yes

	mean_time_to_happen = { days = 15 }

	pre_triggers = {
		is_ai = no
	}

	trigger = {
        has_policy_flag = shr_autocolonisation_enabled_no_machines_protocols
	}

	immediate = {
		
	}
}
